Grammar ::= 'Сап конфешнс, пишу о' Identifier '.'TranslationUnit Terminator
TranslationUnit ::= ExternalDeclaration '.' {TranslationUnit}?

ExternalDeclaration ::= FunctionDefinition | Declaration

AssignmentExpression ::= Identifier '=' Expression
Expression ::= Priority5

Priority5 ::= Priority4 {['и', 'или'] Priority4}*
Priority4 ::= Priority3 {['==', '>=', '<=', '>', '<', '!='] Priority3}?
Priority3 ::= Priority2 {['+', '-'] Priority2}*
Priority2 ::= Priority1 {['*', '/'] Priority1}*
Priority1 ::= ['sin', 'cos', 'корень', 'floor', 'не'] PrimaryExpression | PrimaryExpression

PrimaryExpression ::= '(' Priority5 ')' | Diff | FunctionCall | Identifier | Constant | In

If       ::= 'Зачем я пошел на Физтех если тут' Expression 'что мне делать' Operator
While    ::= 'Физтехи постоянно ноют что'       Expression 'что мне делать' Operator
Return   ::= 'Хочу уже отчислиться отсюда из за' Expression
Break    ::= 'Меня бросила девушка'
Continue ::= 'Опять закрывать сессию'
Out      ::= 'Хочу признаться' Expression
In       ::= 'Почитал посты'
Abort    ::= 'Пошел прыгать с КПМ'

TODO: Statement
Operator ::= If | While | {{ Abort | Out | Return | Break | Continue | FunctionCall | AssignmentExpression | Declaration | 'надоело уже' OperatorList 'каждый раз это' } '.'}
OperatorList ::= Operator {OperatorList}?

Declaration ::= TypeSpecifier InitializerDeclarator
TypeSpecifier ::= 'брс'
InitializerDeclarator ::= {AssignmentExpression | Identifier}

FunctionDefinition ::= 'Физтех-школа' TypeSpecifier Identifier '(' ParameterList ')' 'надоело уже' OperatorList 'каждый раз это'
FunctionCall       ::= 'все говорят что' Identifier '(' ArgumentList ')' 

ArgumentList  ::= Expression  {',' ArgumentList}?
ParameterList ::= Declaration {',' ParameterList}?

Diff := 'производная' '(' Identifier ',' DiffPriority3 ')' //TODO: change to square brackets

DiffPriority3 ::= DiffPriority2 {['+', '-'] DiffPriority2}*
DiffPriority2 ::= DiffPriority1 {['*', '/'] DiffPriority1}*
DiffPriority1 ::= ['sin', 'cos'] PrimaryExpression | PrimaryExpression
Identifier ::= [a-zA-Z_]+[0-9A-Za-z_]*
